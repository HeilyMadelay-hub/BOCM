"""
Script de configuraci√≥n autom√°tica para el Detector Inteligente BOCM
Configura el sistema para usar solo la detecci√≥n inteligente de cambios
"""

import os
import json
import shutil
from datetime import datetime

def configurar_detector_inteligente():
    """Configura el sistema para usar el detector inteligente"""
    

    #Este archivo, llamado configurar_detector.py, es un script en Python dise√±ado para configurar
    #un sistema llamado "Detector Inteligente BOCM". Su prop√≥sito principal es preparar el entorno 
    #necesario para que el sistema funcione correctamente, asegur√°ndose de que los archivos, directorios 
    #y configuraciones requeridas est√©n en su lugar. 

    print("üîß CONFIGURANDO DETECTOR INTELIGENTE BOCM")
    print("=" * 50)
    
    # 1. Verificar archivos necesarios
    archivos_necesarios = [
        'detector_patrones_cambio.py',
        'main_inteligente.py', 
        'tester_detector.py',
        'bocm_scraper.py',
        'config.py',
        'utils.py'
    ]
    
    print("\nüìã Verificando archivos necesarios...")
    for archivo in archivos_necesarios:
        if os.path.exists(archivo):
            print(f"   ‚úÖ {archivo}")
        else:
            print(f"   ‚ùå {archivo} - FALTANTE")
            return False
    
    # 2. Crear backup del main original
    if os.path.exists('main.py'):
        backup_name = f'main_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.py'
        shutil.copy('main.py', backup_name)
        print(f"\nüíæ Backup creado: {backup_name}")
    
    # 3. Crear base de conocimiento vac√≠a si no existe
    if not os.path.exists('codigos_convenios.json'):
        with open('codigos_convenios.json', 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False, indent=2)
        print("üìÑ Archivo de base de conocimiento creado")
    
    # 4. Crear directorios necesarios
    directorios = ['convenios_bocm', 'convenios_referencia']
    for directorio in directorios:
        if not os.path.exists(directorio):
            os.makedirs(directorio)
            print(f"üìÅ Directorio creado: {directorio}")
    
    # 5. Configurar permisos de archivos principales
    archivos_ejecutables = ['main_inteligente.py', 'tester_detector.py']
    for archivo in archivos_ejecutables:
        if os.path.exists(archivo):
            # En Windows no necesitamos chmod, pero lo documentamos
            print(f"üîß Configurado: {archivo}")
    
    print("\n‚úÖ CONFIGURACI√ìN COMPLETADA")
    print("\nüöÄ PR√ìXIMOS PASOS:")
    print("   1. Ejecuta: python tester_detector.py")
    print("   2. Prueba con una fecha espec√≠fica")
    print("   3. Una vez confirmado, usa: python main_inteligente.py")
    
    return True

def mostrar_instrucciones():
    """Muestra las instrucciones de uso"""
    
    print("\n" + "="*60)
    print("üìñ INSTRUCCIONES DE USO DEL DETECTOR INTELIGENTE")
    print("="*60)
    
    print("\nüß™ MODO PRUEBAS (Recomendado para empezar):")
    print("   python tester_detector.py")
    print("   - Prueba fechas espec√≠ficas")
    print("   - Ve exactamente qu√© detecta")
    print("   - No modifica nada")
    
    print("\nü§ñ MODO PRODUCCI√ìN:")
    print("   python main_inteligente.py")
    print("   - Procesa el d√≠a actual")
    print("   - O fechas espec√≠ficas")
    print("   - Lista para integrar con BD")
    
    print("\nüîç EJEMPLO DE PRUEBA:")
    print("   1. Ejecuta: python tester_detector.py")
    print("   2. Selecciona opci√≥n 1 (fecha espec√≠fica)")
    print("   3. Ingresa: 20250524")
    print("   4. Observa los resultados")
    
    print("\n‚ö†Ô∏è  IMPORTANTE:")
    print("   - El sistema SOLO procesa convenios con cambios de c√≥digo")
    print("   - Si un d√≠a no detecta nada, es NORMAL")
    print("   - La mayor√≠a de d√≠as NO tienen cambios")
    
    print("\nüîß PERSONALIZACI√ìN:")
    print("   - Edita detector_patrones_cambio.py para ajustar patrones")
    print("   - Prueba siempre con tester_detector.py despu√©s de cambios")

def main():
    """Funci√≥n principal del configurador"""
    
    print("üöÄ CONFIGURADOR DEL DETECTOR INTELIGENTE BOCM")
    print("=" * 55)
    print("Este script configura el sistema para detectar SOLO convenios")
    print("con cambios reales en c√≥digos, evitando descargas innecesarias.\n")
    
    # Confirmar configuraci√≥n
    respuesta = input("¬øDeseas configurar el detector inteligente? (s/n): ").lower().strip()
    
    if respuesta in ['s', 'si', 's√≠', 'y', 'yes']:
        exito = configurar_detector_inteligente()
        
        if exito:
            mostrar_instrucciones()
            
            # Ofrecer prueba inmediata
            print("\n" + "="*60)
            prueba = input("¬øDeseas hacer una prueba ahora? (s/n): ").lower().strip()
            
            if prueba in ['s', 'si', 's√≠', 'y', 'yes']:
                print("\nüß™ Iniciando modo de pruebas...")
                try:
                    os.system('python tester_detector.py')
                except Exception as e:
                    print(f"‚ùå Error ejecutando pruebas: {e}")
                    print("   Ejecuta manualmente: python tester_detector.py")
    else:
        print("‚ùå Configuraci√≥n cancelada")
        print("   Para configurar m√°s tarde, ejecuta este script nuevamente")

if __name__ == "__main__":
    main()
